import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;

public class TPMInterop {
    private static final Linker linker = Linker.nativeLinker();

    public static void main(String[] args) throws Throwable {
        System.load("/full/path/to/native/libtpmseal.so");

        SymbolLookup symbols = SymbolLookup.loaderLookup();

        MethodHandle init_tpm = linker.downcallHandle(
            symbols.find("init_tpm").orElseThrow(),
            FunctionDescriptor.of(ValueLayout.JAVA_INT)
        );

        MethodHandle cleanup_tpm = linker.downcallHandle(
            symbols.find("cleanup_tpm").orElseThrow(),
            FunctionDescriptor.ofVoid()
        );

        int result = (int) init_tpm.invokeExact();
        if (result != 0) {
            System.err.println("TPM initialization failed: " + result);
            return;
        }

        System.out.println("TPM initialized successfully.");

        // Clean up
        cleanup_tpm.invokeExact();
        System.out.println("TPM cleaned up.");
    }
}